#
# SPDX-License-Identifier: Apache-2.0
#
# Copyright 2022-2023 The Jarviz authors.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

ERROR_PATH_DOES_NOT_EXIST  = [JARVIZ-000] Path does not exist: {}
ERROR_PATH_IS_NOT_A_FILE   = [JARVIZ-001] Path is not a file: {}
ERROR_PATH_IS_NOT_READABLE = [JARVIZ-002] Path is not readable: {}
ERROR_PATH_IS_NOT_JAR      = [JARVIZ-003] Path is not a JAR file: {}
ERROR_INVALID_GAV          = [JARVIZ-004] Invalid GAV coordinates: {}
ERROR_INVALID_URL          = [JARVIZ-005] Invalid URL: {}
ERROR_OPENING_JAR          = [JARVIZ-006] Error while opening JAR file: {}
ERROR_DOWNLOADING_URL      = [JARVIZ-007] Error while downloading URL: {}
ERROR_READING_JAR_MANIFEST = [JARVIZ-010] Error reading manifest from {}
ERROR_READING_JAR_ENTRY    = [JARVIZ-011] Error reading entry {} from {}
ERROR_CREATE_DIRECTORY     = [JARVIZ-900] Could not create directory {}
ERROR_UNEXPECTED_WRITE     = [JARVIZ-901] Unexpected error when writing to out
ERROR_UNEXPECTED           = [JARVIZ-902] Unexpected error

ERROR_WRITE_FILE           = Could not write to {}

bytecode.version.attribute         = Bytecode-Version: {}
bytecode.unversioned.classes.total = Unversioned classes. Bytecode version: {} total: {}
bytecode.versioned.classes.total   = Versioned classes {}. Bytecode version: {} total: {}
module.name                        = name: {}
module.version                     = version: {}
module.source                      = source: {}
module.open                        = open: {}
module.automatic                   = automatic: {}
module.valid                       = valid: {}
module.reason                      = reason: {}
module.main.class                  = main-class: {}
module.exports                     = exports:
module.exports.qualified           = qualified exports:
module.exports.to                  = {} to{}
module.requires                    = requires:
module.opens                       = opens:
module.opens.qualified             = qualified opens:
module.uses                        = uses:
module.provides                    = provides:
module.provides.with               = {} with{}
module.opens.to                    = {} to{}
module.contains                    = contains:

report.key.jarviz          = jarviz
report.key.value           = value
report.key.subject         = subject
report.key.file            = file
report.key.size            = size
report.key.sha256          = sha256
report.key.services        = services
report.key.service         = service
report.key.implementations = implementations
report.key.implementation  = implementation
report.key.manifest        = manifest
report.key.name            = name
report.key.version         = version
report.key.source          = source
report.key.automatic       = automatic
report.key.valid           = valid
report.key.reason          = reason
report.key.attribute.name  = attributeName
report.key.section.name    = sectionName
report.key.module          = module
report.key.open            = open
report.key.main.class      = mainClass
report.key.exports         = exports
report.key.export          = export
report.key.requires        = requires
report.key.require         = require
report.key.provides        = provides
report.key.provider        = provider
report.key.uses            = uses
report.key.use             = use
report.key.package         = package
report.key.modifiers       = modifiers
report.key.qualified       = qualified
report.key.targets         = targets
report.key.target          = target
report.key.contains        = contains
report.key.bytecode        = bytecode
report.key.unversioned     = unversioned
report.key.versioned       = versioned
report.key.total           = total
report.key.classes         = classes
report.key.class           = class
